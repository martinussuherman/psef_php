/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v0.1/Apotek/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Apotek retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Apotek": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Apotek successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["ApotekIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Apotek was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["Apotek"];
          };
        };
        /** The Apotek was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Apotek is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Apotek with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Apotek to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=minimal": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none": components["schemas"]["Apotek"];
          "application/json;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json": components["schemas"]["Apotek"];
          "application/xml": components["schemas"]["Apotek"];
          "text/json": components["schemas"]["Apotek"];
          "application/*+json": components["schemas"]["Apotek"];
        };
      };
    };
  };
  "/api/v0.1/Apotek({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Apotek identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Apotek was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["Apotek"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Apotek does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    put: {
      parameters: {
        path: {
          /** The requested Apotek identifier. */
          id: number;
        };
      };
      responses: {
        /** The Apotek was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Apotek"];
          };
        };
        /** The Apotek was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Apotek is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Apotek does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Apotek to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=minimal": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none": components["schemas"]["Apotek"];
          "application/json;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json": components["schemas"]["Apotek"];
          "application/xml": components["schemas"]["Apotek"];
          "text/json": components["schemas"]["Apotek"];
          "application/*+json": components["schemas"]["Apotek"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Apotek to delete. */
          id: number;
        };
      };
      responses: {
        /** The Apotek was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Apotek does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Apotek identifier. */
          id: number;
        };
      };
      responses: {
        /** The Apotek was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Apotek"];
          };
        };
        /** The Apotek was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Apotek is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Apotek does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Apotek identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Apotek to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=minimal": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=full": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json;odata.metadata=none": components["schemas"]["Apotek"];
          "application/json;odata.streaming=true": components["schemas"]["Apotek"];
          "application/json;odata.streaming=false": components["schemas"]["Apotek"];
          "application/json": components["schemas"]["Apotek"];
          "application/xml": components["schemas"]["Apotek"];
          "text/json": components["schemas"]["Apotek"];
          "application/*+json": components["schemas"]["Apotek"];
        };
      };
    };
  };
  "/api/v0.1/DashboardPemohon": {
    /** *Role: None* */
    get: {
      responses: {
        /** Pemohon Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/DashboardVerifikator": {
    /** *Role: Verifikator* */
    get: {
      responses: {
        /** Verifikator Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/DashboardKepalaSeksi": {
    /** *Role: Kasi* */
    get: {
      responses: {
        /** Kepala Seksi Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/DashboardKepalaSubDirektorat": {
    /** *Role: Kasubdit* */
    get: {
      responses: {
        /** Kepala Sub Direktorat Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/DashboardDirekturPelayananFarmasi": {
    /** *Role: Diryanfar* */
    get: {
      responses: {
        /** Direktur Pelayanan Farmasi Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/DashboardDirekturJenderal": {
    /** *Role: Dirjen* */
    get: {
      responses: {
        /** Direktur Jenderal Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/DashboardValidatorSertifikat": {
    /** *Role: Validator* */
    get: {
      responses: {
        /** Validator Sertifikat Dashboard Info. */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/UploadUserFile": {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** User file */
            file?: string | null;
          };
        };
      };
    };
  };
  "/api/v0.1/UploadBanner": {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Banner image file */
            file?: string | null;
          };
        };
      };
    };
  };
  "/api/v0.1/UploadNewsImage": {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** News image file */
            file?: string | null;
          };
        };
      };
    };
  };
  "/api/v0.1/UploadUnduhan": {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Unduhan file */
            file?: string | null;
          };
        };
      };
    };
  };
  "/api/v0.1/HistoryPermohonan/TotalCount": {
    /** *Min role: Verifikator* */
    get: {
      responses: {
        /** Total count of History Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/HistoryPermohonan": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** History Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HistoryPermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The History Permohonan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["HistoryPermohonan"];
          };
        };
        /** The History Permohonan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The History Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The History Permohonan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The History Permohonan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json": components["schemas"]["HistoryPermohonan"];
          "application/xml": components["schemas"]["HistoryPermohonan"];
          "text/json": components["schemas"]["HistoryPermohonan"];
          "application/*+json": components["schemas"]["HistoryPermohonan"];
        };
      };
    };
  };
  "/api/v0.1/HistoryPermohonan({id})": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        path: {
          /** The requested History Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The History Permohonan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HistoryPermohonan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The History Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested History Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The History Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["HistoryPermohonan"];
          };
        };
        /** The History Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The History Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The History Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The History Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json": components["schemas"]["HistoryPermohonan"];
          "application/xml": components["schemas"]["HistoryPermohonan"];
          "text/json": components["schemas"]["HistoryPermohonan"];
          "application/*+json": components["schemas"]["HistoryPermohonan"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The History Permohonan to delete. */
          id: number;
        };
      };
      responses: {
        /** The History Permohonan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The History Permohonan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested History Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The History Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["HistoryPermohonan"];
          };
        };
        /** The History Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The History Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The History Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The History Permohonan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial History Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=full": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.metadata=none": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.streaming=true": components["schemas"]["HistoryPermohonan"];
          "application/json;odata.streaming=false": components["schemas"]["HistoryPermohonan"];
          "application/json": components["schemas"]["HistoryPermohonan"];
          "application/xml": components["schemas"]["HistoryPermohonan"];
          "text/json": components["schemas"]["HistoryPermohonan"];
          "application/*+json": components["schemas"]["HistoryPermohonan"];
        };
      };
    };
  };
  "/api/v0.1/HistoryPermohonan/ByPermohonan(permohonanId={permohonanId})": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          permohonanId: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** List of History Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HistoryPermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The list of History Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
  "/api/v0.1/Klinik/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Klinik retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Klinik": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Klinik successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["KlinikIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Klinik was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["Klinik"];
          };
        };
        /** The Klinik was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Klinik is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Klinik with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Klinik to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=minimal": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none": components["schemas"]["Klinik"];
          "application/json;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json": components["schemas"]["Klinik"];
          "application/xml": components["schemas"]["Klinik"];
          "text/json": components["schemas"]["Klinik"];
          "application/*+json": components["schemas"]["Klinik"];
        };
      };
    };
  };
  "/api/v0.1/Klinik({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Klinik identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Klinik was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["Klinik"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Klinik does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    put: {
      parameters: {
        path: {
          /** The requested Klinik identifier. */
          id: number;
        };
      };
      responses: {
        /** The Klinik was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Klinik"];
          };
        };
        /** The Klinik was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Klinik is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Klinik does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Klinik to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=minimal": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none": components["schemas"]["Klinik"];
          "application/json;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json": components["schemas"]["Klinik"];
          "application/xml": components["schemas"]["Klinik"];
          "text/json": components["schemas"]["Klinik"];
          "application/*+json": components["schemas"]["Klinik"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Klinik to delete. */
          id: number;
        };
      };
      responses: {
        /** The Klinik was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Klinik does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Klinik identifier. */
          id: number;
        };
      };
      responses: {
        /** The Klinik was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Klinik"];
          };
        };
        /** The Klinik was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Klinik is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Klinik does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Klinik identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Klinik to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=minimal": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=full": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json;odata.metadata=none": components["schemas"]["Klinik"];
          "application/json;odata.streaming=true": components["schemas"]["Klinik"];
          "application/json;odata.streaming=false": components["schemas"]["Klinik"];
          "application/json": components["schemas"]["Klinik"];
          "application/xml": components["schemas"]["Klinik"];
          "text/json": components["schemas"]["Klinik"];
          "application/*+json": components["schemas"]["Klinik"];
        };
      };
    };
  };
  "/api/v0.1/OssInfo({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested OSS Information identifier. */
          id: string | null;
        };
      };
      responses: {
        /** The OSS Information was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["OssInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/OssInfo/OssFullInfo": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** The requested OSS Full Information identifier. */
          id?: string | null;
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The OSS Full Information was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["OssFullInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The OSS Full Information does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
  "/api/v0.1/Pemohon/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Pemohon retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Pemohon": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Pemohon successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonUserInfoIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Pemohon was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["PemohonView"];
          };
        };
        /** The Pemohon was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Pemohon is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Pemohon to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json": components["schemas"]["PemohonUpdate"];
          "application/xml": components["schemas"]["PemohonUpdate"];
          "text/json": components["schemas"]["PemohonUpdate"];
          "application/*+json": components["schemas"]["PemohonUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Pemohon({id})": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        path: {
          /** The requested Pemohon identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Pemohon was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonUserInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Pemohon identifier. */
          id: number;
        };
      };
      responses: {
        /** The Pemohon was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonView"];
          };
        };
        /** The Pemohon was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Pemohon is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Pemohon to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json": components["schemas"]["PemohonUpdate"];
          "application/xml": components["schemas"]["PemohonUpdate"];
          "text/json": components["schemas"]["PemohonUpdate"];
          "application/*+json": components["schemas"]["PemohonUpdate"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Pemohon to delete. */
          id: number;
        };
      };
      responses: {
        /** The Pemohon was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Pemohon identifier. */
          id: number;
        };
      };
      responses: {
        /** The Pemohon was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonView"];
          };
        };
        /** The Pemohon was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Pemohon is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Pemohon to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json": components["schemas"]["PemohonUpdate"];
          "application/xml": components["schemas"]["PemohonUpdate"];
          "text/json": components["schemas"]["PemohonUpdate"];
          "application/*+json": components["schemas"]["PemohonUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Pemohon/CurrentUserInfo": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Pemohon was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonUserInfo"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
  "/api/v0.1/Pemohon/CurrentUser": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Pemohon was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonView"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    post: {
      responses: {
        /** The Pemohon was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["PemohonView"];
          };
        };
        /** The Pemohon was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Pemohon is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Pemohon to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json": components["schemas"]["PemohonUpdate"];
          "application/xml": components["schemas"]["PemohonUpdate"];
          "text/json": components["schemas"]["PemohonUpdate"];
          "application/*+json": components["schemas"]["PemohonUpdate"];
        };
      };
    };
    /** *Min role: None* */
    patch: {
      responses: {
        /** The Pemohon was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["PemohonView"];
          };
        };
        /** The Pemohon was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Pemohon is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Pemohon does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Pemohon identifier is specified on delta and its value is different from id. */
        422: unknown;
      };
      /** The partial Pemohon to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PemohonUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PemohonUpdate"];
          "application/json": components["schemas"]["PemohonUpdate"];
          "application/xml": components["schemas"]["PemohonUpdate"];
          "text/json": components["schemas"]["PemohonUpdate"];
          "application/*+json": components["schemas"]["PemohonUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Perizinan": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Perizinan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PerizinanViewIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Perizinan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["PerizinanView"];
          };
        };
        /** The Perizinan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Perizinan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Perizinan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Perizinan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json": components["schemas"]["PerizinanUpdate"];
          "application/xml": components["schemas"]["PerizinanUpdate"];
          "text/json": components["schemas"]["PerizinanUpdate"];
          "application/*+json": components["schemas"]["PerizinanUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Perizinan({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Perizinan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
        };
      };
      responses: {
        /** The Perizinan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PerizinanView"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Perizinan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Perizinan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Perizinan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["PerizinanView"];
          };
        };
        /** The Perizinan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Perizinan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Perizinan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Perizinan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json": components["schemas"]["PerizinanUpdate"];
          "application/xml": components["schemas"]["PerizinanUpdate"];
          "text/json": components["schemas"]["PerizinanUpdate"];
          "application/*+json": components["schemas"]["PerizinanUpdate"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Perizinan to delete. */
          id: number;
        };
      };
      responses: {
        /** The Perizinan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Perizinan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Perizinan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Perizinan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["PerizinanView"];
          };
        };
        /** The Perizinan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Perizinan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Perizinan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Perizinan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PerizinanUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PerizinanUpdate"];
          "application/json": components["schemas"]["PerizinanUpdate"];
          "application/xml": components["schemas"]["PerizinanUpdate"];
          "text/json": components["schemas"]["PerizinanUpdate"];
          "application/*+json": components["schemas"]["PerizinanUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Perizinan/HalamanMuka": {
    /** *Anonymous Access* */
    get: {
      parameters: {
        query: {
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Perizinan Halaman Muka successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PerizinanHalamanMukaIEnumerableODataValue"];
          };
        };
      };
    };
  };
  "/api/v0.1/Permohonan/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Permohonan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** The Permohonan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Permohonan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json": components["schemas"]["Permohonan"];
          "application/xml": components["schemas"]["Permohonan"];
          "text/json": components["schemas"]["Permohonan"];
          "application/*+json": components["schemas"]["Permohonan"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan({id})": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Permohonan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** The Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json": components["schemas"]["Permohonan"];
          "application/xml": components["schemas"]["Permohonan"];
          "text/json": components["schemas"]["Permohonan"];
          "application/*+json": components["schemas"]["Permohonan"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Permohonan to delete. */
          id: number;
        };
      };
      responses: {
        /** The Permohonan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** The Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json": components["schemas"]["Permohonan"];
          "application/xml": components["schemas"]["Permohonan"];
          "text/json": components["schemas"]["Permohonan"];
          "application/*+json": components["schemas"]["Permohonan"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/VerifikatorSetujui": {
    /** *Role: Verifikator* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/VerifikatorKembalikan": {
    /** *Role: Verifikator* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSeksiSetujui": {
    /** *Role: Kasi* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSeksiKembalikan": {
    /** *Role: Kasi* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSubDirektoratSetujui": {
    /** *Role: Kasubdit* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSubDirektoratKembalikan": {
    /** *Role: Kasubdit* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturPelayananFarmasiSetujui": {
    /** *Role: Diryanfar* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturPelayananFarmasiKembalikan": {
    /** *Role: Diryanfar* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturJenderalSetujui": {
    /** *Role: Dirjen* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturJenderalKembalikan": {
    /** *Role: Dirjen* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturJenderalSelesaikan": {
    /** *Role: Dirjen* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=minimal": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json": components["schemas"]["GenerateTandaDaftarData"];
          "application/xml": components["schemas"]["GenerateTandaDaftarData"];
          "text/json": components["schemas"]["GenerateTandaDaftarData"];
          "application/*+json": components["schemas"]["GenerateTandaDaftarData"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/ValidatorSelesaikan": {
    /** *Role: Validator* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=minimal": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json": components["schemas"]["GenerateTandaDaftarData"];
          "application/xml": components["schemas"]["GenerateTandaDaftarData"];
          "text/json": components["schemas"]["GenerateTandaDaftarData"];
          "application/*+json": components["schemas"]["GenerateTandaDaftarData"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/ValidatorRegenerateTandaDaftar": {
    /** *Role: Validator* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=minimal": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=full": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.metadata=none": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.streaming=true": components["schemas"]["GenerateTandaDaftarData"];
          "application/json;odata.streaming=false": components["schemas"]["GenerateTandaDaftarData"];
          "application/json": components["schemas"]["GenerateTandaDaftarData"];
          "application/xml": components["schemas"]["GenerateTandaDaftarData"];
          "text/json": components["schemas"]["GenerateTandaDaftarData"];
          "application/*+json": components["schemas"]["GenerateTandaDaftarData"];
        };
      };
    };
  };
  "/api/v0.1/Permohonan/Semua": {
    /** *Min Role: Verifikator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/VerifikatorPending": {
    /** *Role: Verifikator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSeksiPending": {
    /** *Role: Kasi* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSubDirektoratPending": {
    /** *Role: Kasubdit* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturPelayananFarmasiPending": {
    /** *Role: Diryanfar* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturJenderalPending": {
    /** *Role: Dirjen* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/ValidatorSertifikatPending": {
    /** *Role: Validator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/ValidatorSertifikatDone": {
    /** *Role: Validator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanPemohonIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/VerifikatorPendingTotal": {
    /** *Role: Verifikator* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSeksiPendingTotal": {
    /** *Role: Kasi* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/KepalaSubDirektoratPendingTotal": {
    /** *Role: Kasubdit* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturPelayananFarmasiPendingTotal": {
    /** *Role: Diryanfar* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/DirekturJenderalPendingTotal": {
    /** *Role: Dirjen* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/ValidatorSertifikatPendingTotal": {
    /** *Role: Validator* */
    get: {
      responses: {
        /** Total count of Permohonan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/Rumusan": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/Progress": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/Selesai": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/Ditolak": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/Permohonan/LayananTotalStartTime": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanApotek({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** List of Apotek successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["ApotekIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The list of Apotek does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    put: {
      parameters: {
        path: {
          /** Unused, please use 1. */
          id: number;
        };
      };
      responses: {
        /** The list of Apotek was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Apotek is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Apotek to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanApotek"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json": components["schemas"]["PermohonanApotek"];
          "application/xml": components["schemas"]["PermohonanApotek"];
          "text/json": components["schemas"]["PermohonanApotek"];
          "application/*+json": components["schemas"]["PermohonanApotek"];
        };
      };
    };
    /** *Min role: None* */
    delete: {
      parameters: {
        path: {
          /** Unused, please use 1. */
          id: number;
        };
      };
      responses: {
        /** The list of Apotek was successfully deleted. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Apotek is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Apotek to delete. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanApotek"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json": components["schemas"]["PermohonanApotek"];
          "application/xml": components["schemas"]["PermohonanApotek"];
          "text/json": components["schemas"]["PermohonanApotek"];
          "application/*+json": components["schemas"]["PermohonanApotek"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanApotek": {
    /** *Min role: None* */
    post: {
      responses: {
        /** The list of Apotek was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Apotek is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Apotek to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanApotek"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanApotek"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanApotek"];
          "application/json": components["schemas"]["PermohonanApotek"];
          "application/xml": components["schemas"]["PermohonanApotek"];
          "text/json": components["schemas"]["PermohonanApotek"];
          "application/*+json": components["schemas"]["PermohonanApotek"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: None* */
    post: {
      responses: {
        /** The Permohonan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** The Permohonan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Permohonan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json": components["schemas"]["Permohonan"];
          "application/xml": components["schemas"]["Permohonan"];
          "text/json": components["schemas"]["Permohonan"];
          "application/*+json": components["schemas"]["Permohonan"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Permohonan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    patch: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Permohonan"];
          };
        };
        /** The Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Permohonan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=full": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json;odata.metadata=none": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=true": components["schemas"]["Permohonan"];
          "application/json;odata.streaming=false": components["schemas"]["Permohonan"];
          "application/json": components["schemas"]["Permohonan"];
          "application/xml": components["schemas"]["Permohonan"];
          "text/json": components["schemas"]["Permohonan"];
          "application/*+json": components["schemas"]["Permohonan"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/Ajukan": {
    /** *Min role: None* */
    post: {
      responses: {
        /** Success */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** Permohonan by system update data. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanSystemUpdate"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanSystemUpdate"];
          "application/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/xml": components["schemas"]["PermohonanSystemUpdate"];
          "text/json": components["schemas"]["PermohonanSystemUpdate"];
          "application/*+json": components["schemas"]["PermohonanSystemUpdate"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/Rumusan": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/Dikembalikan": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/Progress": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/Selesai": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/Ditolak": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanCurrentUser/AlasanDikembalikan": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** The requested Permohonan identifier. */
          permohonanId?: number;
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
        };
      };
      responses: {
        /** PermohonanSystemUpdate successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanSystemUpdate"];
          };
        };
        /** PermohonanSystemUpdate not found. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanKlinik({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** List of Klinik successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["KlinikIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The list of Klinik does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    put: {
      parameters: {
        path: {
          /** Unused, please use 1. */
          id: number;
        };
      };
      responses: {
        /** The list of Klinik was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Klinik is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Klinik to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json": components["schemas"]["PermohonanKlinik"];
          "application/xml": components["schemas"]["PermohonanKlinik"];
          "text/json": components["schemas"]["PermohonanKlinik"];
          "application/*+json": components["schemas"]["PermohonanKlinik"];
        };
      };
    };
    /** *Min role: None* */
    delete: {
      parameters: {
        path: {
          /** Unused, please use 1. */
          id: number;
        };
      };
      responses: {
        /** The list of Klinik was successfully deleted. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Klinik is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Klinik to delete. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json": components["schemas"]["PermohonanKlinik"];
          "application/xml": components["schemas"]["PermohonanKlinik"];
          "text/json": components["schemas"]["PermohonanKlinik"];
          "application/*+json": components["schemas"]["PermohonanKlinik"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanKlinik": {
    /** *Min role: None* */
    post: {
      responses: {
        /** The list of Klinik was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Klinik is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Klinik to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanKlinik"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanKlinik"];
          "application/json": components["schemas"]["PermohonanKlinik"];
          "application/xml": components["schemas"]["PermohonanKlinik"];
          "text/json": components["schemas"]["PermohonanKlinik"];
          "application/*+json": components["schemas"]["PermohonanKlinik"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanRumahSakit({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** List of Rumah Sakit successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["RumahSakitIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The list of Rumah Sakit does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    put: {
      parameters: {
        path: {
          /** Unused, please use 1. */
          id: number;
        };
      };
      responses: {
        /** The list of Rumah Sakit was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Rumah Sakit is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Rumah Sakit to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json": components["schemas"]["PermohonanRumahSakit"];
          "application/xml": components["schemas"]["PermohonanRumahSakit"];
          "text/json": components["schemas"]["PermohonanRumahSakit"];
          "application/*+json": components["schemas"]["PermohonanRumahSakit"];
        };
      };
    };
    /** *Min role: None* */
    delete: {
      parameters: {
        path: {
          /** Unused, please use 1. */
          id: number;
        };
      };
      responses: {
        /** The list of Rumah Sakit was successfully deleted. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Rumah Sakit is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Rumah Sakit to delete. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json": components["schemas"]["PermohonanRumahSakit"];
          "application/xml": components["schemas"]["PermohonanRumahSakit"];
          "text/json": components["schemas"]["PermohonanRumahSakit"];
          "application/*+json": components["schemas"]["PermohonanRumahSakit"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanRumahSakit": {
    /** *Min role: None* */
    post: {
      responses: {
        /** The list of Rumah Sakit was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The list of Rumah Sakit is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      /** The list of Rumah Sakit to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=minimal": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=full": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.metadata=none": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.streaming=true": components["schemas"]["PermohonanRumahSakit"];
          "application/json;odata.streaming=false": components["schemas"]["PermohonanRumahSakit"];
          "application/json": components["schemas"]["PermohonanRumahSakit"];
          "application/xml": components["schemas"]["PermohonanRumahSakit"];
          "text/json": components["schemas"]["PermohonanRumahSakit"];
          "application/*+json": components["schemas"]["PermohonanRumahSakit"];
        };
      };
    };
  };
  "/api/v0.1/PermohonanStatus": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan Status successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanStatusIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanStatus({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan Status identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Permohonan Status was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanStatus"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan Status does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
  "/api/v0.1/PermohonanType": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Indicates the related entities to be represented inline. The maximum depth is 2. */
          $expand?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Permohonan Type successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanTypeIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/PermohonanType({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Permohonan Type identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Permohonan Type was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["PermohonanType"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Permohonan Type does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
  "/api/v0.1/RumahSakit/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Rumah Sakit retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v0.1/RumahSakit": {
    /** *Min role: Admin* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Rumah Sakit successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["RumahSakitIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Rumah Sakit was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["RumahSakit"];
          };
        };
        /** The Rumah Sakit was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Rumah Sakit is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Rumah Sakit with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Rumah Sakit to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=minimal": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none": components["schemas"]["RumahSakit"];
          "application/json;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json": components["schemas"]["RumahSakit"];
          "application/xml": components["schemas"]["RumahSakit"];
          "text/json": components["schemas"]["RumahSakit"];
          "application/*+json": components["schemas"]["RumahSakit"];
        };
      };
    };
  };
  "/api/v0.1/RumahSakit({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Rumah Sakit identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Rumah Sakit was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["RumahSakit"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Rumah Sakit does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: None* */
    put: {
      parameters: {
        path: {
          /** The requested Rumah Sakit identifier. */
          id: number;
        };
      };
      responses: {
        /** The Rumah Sakit was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["RumahSakit"];
          };
        };
        /** The Rumah Sakit was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Rumah Sakit is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Rumah Sakit does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Rumah Sakit to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=minimal": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none": components["schemas"]["RumahSakit"];
          "application/json;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json": components["schemas"]["RumahSakit"];
          "application/xml": components["schemas"]["RumahSakit"];
          "text/json": components["schemas"]["RumahSakit"];
          "application/*+json": components["schemas"]["RumahSakit"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Rumah Sakit to delete. */
          id: number;
        };
      };
      responses: {
        /** The Rumah Sakit was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Rumah Sakit does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Rumah Sakit identifier. */
          id: number;
        };
      };
      responses: {
        /** The Rumah Sakit was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["RumahSakit"];
          };
        };
        /** The Rumah Sakit was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Rumah Sakit is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Rumah Sakit does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Rumah Sakit identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Rumah Sakit to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=minimal": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=full": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json;odata.metadata=none": components["schemas"]["RumahSakit"];
          "application/json;odata.streaming=true": components["schemas"]["RumahSakit"];
          "application/json;odata.streaming=false": components["schemas"]["RumahSakit"];
          "application/json": components["schemas"]["RumahSakit"];
          "application/xml": components["schemas"]["RumahSakit"];
          "text/json": components["schemas"]["RumahSakit"];
          "application/*+json": components["schemas"]["RumahSakit"];
        };
      };
    };
  };
  "/api/v0.1/VerifikasiPermohonan": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Verifikasi Permohonan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Verifikator* */
    post: {
      responses: {
        /** The Verifikasi Permohonan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonan"];
          };
        };
        /** The Verifikasi Permohonan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Verifikasi Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Verifikasi Permohonan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json": components["schemas"]["VerifikasiPermohonan"];
          "application/xml": components["schemas"]["VerifikasiPermohonan"];
          "text/json": components["schemas"]["VerifikasiPermohonan"];
          "application/*+json": components["schemas"]["VerifikasiPermohonan"];
        };
      };
    };
  };
  "/api/v0.1/VerifikasiPermohonan({id})": {
    /** *Min role: Verifikator* */
    get: {
      parameters: {
        path: {
          /** The requested Verifikasi Permohonan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Verifikasi Permohonan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Verifikasi Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Verifikasi Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonan"];
          };
        };
        /** The Verifikasi Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Verifikasi Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Verifikasi Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json": components["schemas"]["VerifikasiPermohonan"];
          "application/xml": components["schemas"]["VerifikasiPermohonan"];
          "text/json": components["schemas"]["VerifikasiPermohonan"];
          "application/*+json": components["schemas"]["VerifikasiPermohonan"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Verifikasi Permohonan to delete. */
          id: number;
        };
      };
      responses: {
        /** The Verifikasi Permohonan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Verifikator* */
    patch: {
      parameters: {
        path: {
          /** The requested Verifikasi Permohonan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Verifikasi Permohonan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonan"];
          };
        };
        /** The Verifikasi Permohonan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Verifikasi Permohonan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Verifikasi Permohonan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Verifikasi Permohonan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=minimal": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=full": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.metadata=none": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.streaming=true": components["schemas"]["VerifikasiPermohonan"];
          "application/json;odata.streaming=false": components["schemas"]["VerifikasiPermohonan"];
          "application/json": components["schemas"]["VerifikasiPermohonan"];
          "application/xml": components["schemas"]["VerifikasiPermohonan"];
          "text/json": components["schemas"]["VerifikasiPermohonan"];
          "application/*+json": components["schemas"]["VerifikasiPermohonan"];
        };
      };
    };
  };
  "/api/v0.1/VerifikasiPermohonan/CurrentUser": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** The requested Permohonan identifier. */
          permohonanId?: number;
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Verifikasi Permohonan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
  "/api/v0.1/VerifikasiPermohonan/ByPermohonan": {
    /** *Min role: None* */
    post: {
      parameters: {
        path: {
          /** The requested Permohonan identifier. */
          permohonanId: number;
        };
      };
      responses: {
        /** The Verifikasi Permohonan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["VerifikasiPermohonan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Verifikasi Permohonan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    /** Represents a Apotek. */
    Apotek: {
      /** Gets or sets the unique identifier for the Apotek. */
      id?: number;
      /** Gets or sets the Apotek name. */
      name?: string | null;
      /** Gets or sets the associated Permohonan identifier. */
      permohonanId?: number | null;
      /** Gets or sets the Apotek SIA number. */
      siaNumber?: string | null;
      /** Gets or sets the Apotek apoteker name. */
      apotekerName?: string | null;
      /** Gets or sets the Apotek apoteker STRA number. */
      straNumber?: string | null;
      /** Gets or sets the Apotek SIPA number. */
      sipaNumber?: string | null;
      /** Gets or sets the Apotek address. */
      address?: string | null;
      /** Gets or sets the associated Provinsi identifier. */
      provinsiId?: number | null;
      /** (Read only) Gets the associated Provinsi name. */
      provinsiName?: string | null;
    };
    ApotekIEnumerableODataValue: {
      value?: components["schemas"]["Apotek"][] | null;
    };
    Void: { [key: string]: unknown };
    /** Represents a Aktifitas Information. */
    Aktifitas: {
      /** Gets or sets the Aktifitas user name. */
      userName?: string | null;
      /** Gets or sets the Aktifitas date. */
      date?: string;
      /** Gets or sets the Aktifitas action. */
      action?: string | null;
      /** Gets or sets the Aktifitas item. */
      item?: string | null;
      /** Gets or sets the Aktifitas item identifier. */
      itemId?: number | null;
    };
    /** Represents a Dashboard Information. */
    DashboardInfo: {
      /** Gets or sets the Dashboard Information total pemohon. */
      totalPemohon?: number;
      /** Gets or sets the Dashboard Information total permohonan pending. */
      totalPermohonanPending?: number;
      /** Gets or sets the Dashboard Information total permohonan. */
      totalPermohonan?: number;
      /** Gets or sets the Dashboard Information total permohonan dalam proses. */
      totalPermohonanDalamProses?: number;
      /** Gets or sets the Dashboard Information total permohonan ditolak. */
      totalPermohonanDitolak?: number;
      /** Gets or sets the Dashboard Information total perizinan. */
      totalPerizinan?: number;
      /** Gets or sets the Dashboard Information aktifitas. */
      aktifitas?: components["schemas"]["Aktifitas"][] | null;
    };
    /** Represents a History Permohonan. */
    HistoryPermohonan: {
      /** Gets or sets the unique identifier for the History Permohonan. */
      id?: number;
      /** Gets or sets the associated Permohonan identifier. */
      permohonanId?: number | null;
      /** Gets or sets the associated Status Permohonan identifier. */
      statusId?: number;
      /** (Read Only) Gets the associated History Permohonan Status name. */
      statusName?: string | null;
      /** Gets or sets the History Permohonan reason. */
      reason?: string | null;
      /** Gets or sets the History Permohonan updated date and time. */
      updatedAt?: string;
      /** Gets or sets the History Permohonan updated by. */
      updatedBy?: string | null;
    };
    HistoryPermohonanIEnumerableODataValue: {
      value?: components["schemas"]["HistoryPermohonan"][] | null;
    };
    /** Represents a Klinik. */
    Klinik: {
      /** Gets or sets the unique identifier for the Klinik. */
      id?: number;
      /** Gets or sets the Klinik name. */
      name?: string | null;
      /** Gets or sets the associated Permohonan identifier. */
      permohonanId?: number | null;
      /** Gets or sets the Klinik SIA number. */
      siaNumber?: string | null;
      /** Gets or sets the Klinik Apoteker name. */
      apotekerName?: string | null;
      /** Gets or sets the Klinik Apoteker STRA number. */
      straNumber?: string | null;
      /** Gets or sets the Klinik SIPA number. */
      sipaNumber?: string | null;
      /** Gets or sets the Klinik address. */
      address?: string | null;
      /** Gets or sets the associated Provinsi identifier. */
      provinsiId?: number | null;
      /** (Read only) Gets the associated Provinsi name. */
      provinsiName?: string | null;
    };
    KlinikIEnumerableODataValue: {
      value?: components["schemas"]["Klinik"][] | null;
    };
    /** Represents a OSS Information. */
    OssInfo: {
      /** Gets or sets the OSS Information NIB. */
      nib?: string | null;
      /** Gets or sets the OSS Information name. */
      name?: string | null;
      /** Gets or sets the OSS Information address. */
      address?: string | null;
      /** Gets or sets the OSS Information NPWP. */
      npwp?: string | null;
      /** Gets or sets the OSS Information SIUP. */
      siup?: string | null;
      /** Gets or sets the OSS Information director name. */
      director?: string | null;
      /** Gets or sets the OSS Information capital source type. */
      capitalSourceType?: number;
      /** Gets or sets the OSS Information company type. */
      companyType?: number;
      /** Gets or sets the OSS Information legal entity type. */
      legalEntityType?: number;
    };
    /** Represents a OSS Pemegang Saham Information. */
    OssPemegangSaham: {
      /** Gets or sets the JenisPemegangSaham. */
      jenisPemegangSaham?: string | null;
      /** Gets or sets the FlagAsing. */
      flagAsing?: string | null;
      /** Gets or sets the TotalModalPemegang. */
      totalModalPemegang?: number;
      /** Gets or sets the JabatanPemegangSaham. */
      jabatanPemegangSaham?: string | null;
      /** Gets or sets the NamaPemegangSaham. */
      namaPemegangSaham?: string | null;
      /** Gets or sets the JnsIdentitasPemegangSaham. */
      jnsIdentitasPemegangSaham?: string | null;
      /** Gets or sets the NoIdentitasPemegangSaham. */
      noIdentitasPemegangSaham?: string | null;
      /** Gets or sets the ValidIdentitasPemegangSaham. */
      validIdentitasPemegangSaham?: string | null;
      /** Gets or sets the NegaraAsalPemegangSaham. */
      negaraAsalPemegangSaham?: string | null;
      /** Gets or sets the PengendaliPemegangSaham. */
      pengendaliPemegangSaham?: string | null;
      /** Gets or sets the NpwpPemegangSaham. */
      npwpPemegangSaham?: string | null;
      /** Gets or sets the AlamatPemegangSaham. */
      alamatPemegangSaham?: string | null;
      /** Gets or sets the FaxPemegangSaham. */
      faxPemegangSaham?: string | null;
      /** Gets or sets the EmailPemegangSaham. */
      emailPemegangSaham?: string | null;
      /** Gets or sets the FlagPajakPemegangSaham. */
      flagPajakPemegangSaham?: string | null;
      /** Gets or sets the KetPajakPemegangSaham. */
      ketPajakPemegangSaham?: string | null;
    };
    /** Represents a OSS Penanggung Jawab Information. */
    OssPenanggungJawab: {
      /** Gets or sets the FlagAsing. */
      flagAsing?: string | null;
      /** Gets or sets the JnsIdentitasPenanggungJwb. */
      jnsIdentitasPenanggungJwb?: string | null;
      /** Gets or sets the NoIdentitasPenanggungJwb. */
      noIdentitasPenanggungJwb?: string | null;
      /** Gets or sets the NamaPenanggungJwb. */
      namaPenanggungJwb?: string | null;
      /** Gets or sets the JabatanPenanggungJwb. */
      jabatanPenanggungJwb?: string | null;
      /** Gets or sets the KebangsaanPenanggungJwb. */
      kebangsaanPenanggungJwb?: string | null;
      /** Gets or sets the NegaraAsalPenanggungJwb. */
      negaraAsalPenanggungJwb?: string | null;
      /** Gets or sets the NpwpPenanggungJwb. */
      npwpPenanggungJwb?: string | null;
      /** Gets or sets the AlamatPenanggungJwb. */
      alamatPenanggungJwb?: string | null;
      /** Gets or sets the JalanPenanggungJwb. */
      jalanPenanggungJwb?: string | null;
      /** Gets or sets the BlokPenanggungJwb. */
      blokPenanggungJwb?: string | null;
      /** Gets or sets the NoPenanggungJwb. */
      noPenanggungJwb?: string | null;
      /** Gets or sets the RtRwPenanggungJwb. */
      rtRwPenanggungJwb?: string | null;
      /** Gets or sets the KelurahanPenanggungJwb. */
      kelurahanPenanggungJwb?: string | null;
      /** Gets or sets the DaerahIdPenanggungJwb. */
      daerahIdPenanggungJwb?: string | null;
      /** Gets or sets the KodePosPenanggungJwb. */
      kodePosPenanggungJwb?: string | null;
      /** Gets or sets the NoTelpPenanggungJwb. */
      noTelpPenanggungJwb?: string | null;
      /** Gets or sets the NoHpPenanggungJwb. */
      noHpPenanggungJwb?: string | null;
      /** Gets or sets the NoFaxPenanggungJwb. */
      noFaxPenanggungJwb?: string | null;
      /** Gets or sets the EmailPenanggungJwb. */
      emailPenanggungJwb?: string | null;
      /** Gets or sets the FlagPajakPenanggungJwb. */
      flagPajakPenanggungJwb?: string | null;
      /** Gets or sets the KetPajakPenanggungJwb. */
      ketPajakPenanggungJwb?: string | null;
    };
    /** Represents a OSS Legalitas Information. */
    OssLegalitas: {
      /** Gets or sets the JenisLegal. */
      jenisLegal?: string | null;
      /** Gets or sets the NoLegal. */
      noLegal?: string | null;
      /** Gets or sets the TglLegal. */
      tglLegal?: string | null;
      /** Gets or sets the AlamatNotaris. */
      alamatNotaris?: string | null;
      /** Gets or sets the NamaNotaris. */
      namaNotaris?: string | null;
      /** Gets or sets the TeleponNotaris. */
      teleponNotaris?: string | null;
    };
    /** Represents a OSS Rptka Tki Pendamping Information. */
    OssRptkaTkiPendamping: {
      /** Gets or sets the IdJabatan. */
      idJabatan?: number;
      /** Gets or sets the IdPendamping. */
      idPendamping?: number;
      /** Gets or sets the Nama. */
      nama?: string | null;
      /** Gets or sets the Nik. */
      nik?: string | null;
      /** Gets or sets the Jabatan. */
      jabatan?: string | null;
      /** Gets or sets the Hp. */
      hp?: string | null;
      /** Gets or sets the Email. */
      email?: string | null;
      /** Gets or sets the Foto. */
      foto?: string | null;
      /** Gets or sets the PendidikanMin. */
      pendidikanMin?: string | null;
      /** Gets or sets the Sertifikat. */
      sertifikat?: string | null;
      /** Gets or sets the PengalamanKerja. */
      pengalamanKerja?: number;
      /** Gets or sets the Keterangan. */
      keterangan?: string | null;
    };
    /** Represents a OSS Rptka Jabatan Information. */
    OssRptkaJabatan: {
      /** Gets or sets the IdJabatan. */
      idJabatan?: number;
      /** Gets or sets the Jabatan. */
      jabatan?: string | null;
      /** Gets or sets the Jumlah. */
      jumlah?: number;
      /** Gets or sets the TglMulai. */
      tglMulai?: string | null;
      /** Gets or sets the TglSelesai. */
      tglSelesai?: string | null;
      /** Gets or sets the Keterangan. */
      keterangan?: string | null;
      /** Gets or sets the list of RptkaTkiPendamping. */
      rptkaTkiPendamping?:
        | components["schemas"]["OssRptkaTkiPendamping"][]
        | null;
    };
    /** Represents a OSS Rptka Negara Information. */
    OssRptkaNegara: {
      /** Gets or sets the IdNegara. */
      idNegara?: string | null;
      /** Gets or sets the Jumlah. */
      jumlah?: number;
    };
    /** Represents a OSS Rptka Lokasi Information. */
    OssRptkaLokasi: {
      /** Gets or sets the LokasiId. */
      lokasiId?: string | null;
      /** Gets or sets the Jumlah. */
      jumlah?: number;
    };
    /** Represents a OSS Rptka Information. */
    OssRptka: {
      /** Gets or sets the JenisRptka. */
      jenisRptka?: string | null;
      /** Gets or sets the NoRptka. */
      noRptka?: string | null;
      /** Gets or sets the RptkaAwal. */
      rptkaAwal?: string | null;
      /** Gets or sets the RptkaAkhir. */
      rptkaAkhir?: string | null;
      /** Gets or sets the RptkaGaji. */
      rptkaGaji?: number;
      /** Gets or sets the JumlahTkaRptka. */
      jumlahTkaRptka?: number;
      /** Gets or sets the JangkaPenggunaanWaktu. */
      jangkaPenggunaanWaktu?: string | null;
      /** Gets or sets the JangkaWaktuPermohonanRptka. */
      jangkaWaktuPermohonanRptka?: number;
      /** Gets or sets the list of RptkaJabatan. */
      rptkaJabatan?: components["schemas"]["OssRptkaJabatan"][] | null;
      /** Gets or sets the list of RptkaNegara. */
      rptkaNegara?: components["schemas"]["OssRptkaNegara"][] | null;
      /** Gets or sets the list of RptkaLokasi. */
      rptkaLokasi?: components["schemas"]["OssRptkaLokasi"][] | null;
    };
    /** Represents a OSS Proyek Lokasi Lokasi Information. */
    OssProyekLokasiLokasi: {
      /** Gets or sets the Serial. */
      serial?: string | null;
      /** Gets or sets the LatLng. */
      latLng?: string | null;
    };
    /** Represents a OSS Proyek Posisi Information. */
    OssProyekPosisi: {
      /** Gets or sets the IdProyekPosisi. */
      idProyekPosisi?: string | null;
      /** Gets or sets the IdProyekLokasi. */
      idProyekLokasi?: string | null;
      /** Gets or sets the PosisiLokasi. */
      posisiLokasi?: string | null;
    };
    /** Represents a OSS Proyek Lokasi Information. */
    OssProyekLokasi: {
      /** Gets or sets the IdProyekLokasi. */
      idProyekLokasi?: string | null;
      /** Gets or sets the ProyekDaerahId. */
      proyekDaerahId?: string | null;
      /** Gets or sets the KdKawasan. */
      kdKawasan?: string | null;
      /** Gets or sets the AlamatUsaha. */
      alamatUsaha?: string | null;
      /** Gets or sets the IdKegiatan. */
      idKegiatan?: string | null;
      /** Gets or sets the ResponseKegiatan. */
      responseKegiatan?: string | null;
      /** Gets or sets the JenisKawasan. */
      jenisKawasan?: string | null;
      /** Gets or sets the JenisLokasi. */
      jenisLokasi?: string | null;
      /** Gets or sets the StatusLokasi. */
      statusLokasi?: string | null;
      /** Gets or sets the list of DataLokasiProyek. */
      dataLokasiProyek?:
        | components["schemas"]["OssProyekLokasiLokasi"][]
        | null;
      /** Gets or sets the list of DataPosisiProyek. */
      dataPosisiProyek?: components["schemas"]["OssProyekPosisi"][] | null;
    };
    /** Represents a OSS Proyek Produk Information. */
    OssProyekProduk: {
      /** Gets or sets the IdProduk. */
      idProduk?: string | null;
      /** Gets or sets the IdProyek. */
      idProyek?: string | null;
      /** Gets or sets the Kbli. */
      kbli?: string | null;
      /** Gets or sets the IdBidangUsaha. */
      idBidangUsaha?: string | null;
      /** Gets or sets the JenisProduksi. */
      jenisProduksi?: string | null;
      /** Gets or sets the Kapasitas. */
      kapasitas?: string | null;
      /** Gets or sets the Satuan. */
      satuan?: string | null;
      /** Gets or sets the MerkDagang. */
      merkDagang?: string | null;
      /** Gets or sets the PemegangHaki. */
      pemegangHaki?: string | null;
      /** Gets or sets the PemegangPaten. */
      pemegangPaten?: string | null;
      /** Gets or sets the PiNomor. */
      piNomor?: string | null;
      /** Gets or sets the PiTanggal. */
      piTanggal?: string | null;
      /** Gets or sets the PiNpwp. */
      piNpwp?: string | null;
      /** Gets or sets the IdKbliTa. */
      idKbliTa?: string | null;
      /** Gets or sets the Tkdn. */
      tkdn?: string | null;
    };
    /** Represents a OSS Proyek Information. */
    OssProyek: {
      /** Gets or sets the IdProyek. */
      idProyek?: string | null;
      /** Gets or sets the NomorProyek. */
      nomorProyek?: string | null;
      /** Gets or sets the UraianUsaha. */
      uraianUsaha?: string | null;
      /** Gets or sets the JumlahTkiL. */
      jumlahTkiL?: number;
      /** Gets or sets the JumlahTkiP. */
      jumlahTkiP?: number;
      /** Gets or sets the JumlahTkaL. */
      jumlahTkaL?: number;
      /** Gets or sets the JumlahTkaP. */
      jumlahTkaP?: number;
      /** Gets or sets the Kbli. */
      kbli?: string | null;
      /** Gets or sets the Sektor. */
      sektor?: string | null;
      /** Gets or sets the MemilikiMenguasai. */
      memilikiMenguasai?: string | null;
      /** Gets or sets the JenisLokasi. */
      jenisLokasi?: string | null;
      /** Gets or sets the StatusTanah. */
      statusTanah?: string | null;
      /** Gets or sets the LuasTanah. */
      luasTanah?: number;
      /** Gets or sets the SatuanLuasTanah. */
      satuanLuasTanah?: string | null;
      /** Gets or sets the PembelianPematangTanah. */
      pembelianPematangTanah?: number;
      /** Gets or sets the BangunanGedung. */
      bangunanGedung?: number;
      /** Gets or sets the MesinPeralatan. */
      mesinPeralatan?: number;
      /** Gets or sets the MesinPeralatanUsd. */
      mesinPeralatanUsd?: number;
      /** Gets or sets the InvestasiLain. */
      investasiLain?: number;
      /** Gets or sets the SubJumlah. */
      subJumlah?: number;
      /** Gets or sets the ModalKerja. */
      modalKerja?: number;
      /** Gets or sets the JumlahInvestasi. */
      jumlahInvestasi?: number;
      /** Gets or sets the TanggalKurs. */
      tanggalKurs?: string | null;
      /** Gets or sets the NilaiKurs. */
      nilaiKurs?: number;
      /** Gets or sets the KdKawasan. */
      kdKawasan?: number;
      /** Gets or sets the JawabLokasiB. */
      jawabLokasiB?: string | null;
      /** Gets or sets the JawabLokasiC. */
      jawabLokasiC?: string | null;
      /** Gets or sets the JawabLokasiD. */
      jawabLokasiD?: string | null;
      /** Gets or sets the JawabLokasiE. */
      jawabLokasiE?: string | null;
      /** Gets or sets the JawabLokasiF. */
      jawabLokasiF?: string | null;
      /** Gets or sets the JawabLokasiG. */
      jawabLokasiG?: string | null;
      /** Gets or sets the FlagPerluasan. */
      flagPerluasan?: string | null;
      /** Gets or sets the FlagCabang. */
      flagCabang?: string | null;
      /** Gets or sets the NpwpCabang. */
      npwpCabang?: string | null;
      /** Gets or sets the NamaCabang. */
      namaCabang?: string | null;
      /** Gets or sets the JenisIdentitasPj. */
      jenisIdentitasPj?: string | null;
      /** Gets or sets the NoIdentitasPj. */
      noIdentitasPj?: string | null;
      /** Gets or sets the NamaPj. */
      namaPj?: string | null;
      /** Gets or sets the StatusProyek. */
      statusProyek?: string | null;
      /** Gets or sets the JenisProyek. */
      jenisProyek?: string | null;
      /** Gets or sets the NamaKegiatan. */
      namaKegiatan?: string | null;
      /** Gets or sets the FlagMerger. */
      flagMerger?: string | null;
      /** Gets or sets the NpwpPerseroanMerger. */
      npwpPerseroanMerger?: string | null;
      /** Gets or sets the NamaPerseroanMerger. */
      namaPerseroanMerger?: string | null;
      /** Gets or sets the SkalaUsaha. */
      skalaUsaha?: string | null;
      /** Gets or sets the SkalaResiko. */
      skalaResiko?: string | null;
      /** Gets or sets the DeskripsiKegiatan. */
      deskripsiKegiatan?: string | null;
      /** Gets or sets the list of DataLokasiProyek. */
      dataLokasiProyek?: components["schemas"]["OssProyekLokasi"][] | null;
      /** Gets or sets the list of DataProyekProduk. */
      dataProyekProduk?: components["schemas"]["OssProyekProduk"][] | null;
    };
    /** Represents a OSS Dni Information. */
    OssDni: {
      /** Gets or sets the KdDni. */
      kdDni?: number;
    };
    /** Represents a OSS Checklist Persyaratan Information. */
    OssChecklistPersyaratan: {
      /** Gets or sets the IdSyarat. */
      idSyarat?: string | null;
      /** Gets or sets the NoDokumen. */
      noDokumen?: string | null;
      /** Gets or sets the TglDokumen. */
      tglDokumen?: string | null;
      /** Gets or sets the FileDokumen. */
      fileDokumen?: string | null;
      /** Gets or sets the Keterangan. */
      keterangan?: string | null;
    };
    /** Represents a OSS Checklist Information. */
    OssChecklist: {
      /** Gets or sets the IdProduk. */
      idProduk?: string | null;
      /** Gets or sets the IdProyek. */
      idProyek?: string | null;
      /** Gets or sets the IdIzin. */
      idIzin?: string | null;
      /** Gets or sets the JenisIzin. */
      jenisIzin?: string | null;
      /** Gets or sets the KdIzin. */
      kdIzin?: string | null;
      /** Gets or sets the KdDaerah. */
      kdDaerah?: string | null;
      /** Gets or sets the NamaIzin. */
      namaIzin?: string | null;
      /** Gets or sets the NoIzin. */
      noIzin?: string | null;
      /** Gets or sets the TglIzin. */
      tglIzin?: string | null;
      /** Gets or sets the Instansi. */
      instansi?: string | null;
      /** Gets or sets the IdBidangSpesifik. */
      idBidangSpesifik?: string | null;
      /** Gets or sets the BidangSpesifik. */
      bidangSpesifik?: string | null;
      /** Gets or sets the IdKewenangan. */
      idKewenangan?: number;
      /** Gets or sets the ParameterKewenangan. */
      parameterKewenangan?: string | null;
      /** Gets or sets the Kewenangan. */
      kewenangan?: string | null;
      /** Gets or sets the FileIzin. */
      fileIzin?: string | null;
      /** Gets or sets the FileIzinOss. */
      fileIzinOss?: string | null;
      /** Gets or sets the FlagChecklist. */
      flagChecklist?: string | null;
      /** Gets or sets the StatusChecklist. */
      statusChecklist?: string | null;
      /** Gets or sets the FlagTransaksional. */
      flagTransaksional?: string | null;
      /** Gets or sets the FlagPerpanjangan. */
      flagPerpanjangan?: string | null;
      /** Gets or sets the KdDokumen. */
      kdDokumen?: string | null;
      /** Gets or sets the NmDokumen. */
      nmDokumen?: string | null;
      /** Gets or sets the list of DataPersyaratan. */
      dataPersyaratan?:
        | components["schemas"]["OssChecklistPersyaratan"][]
        | null;
    };
    /** Represents a Full OSS Information. */
    OssFullInfo: {
      /** Gets or sets the Keterangan. */
      keterangan?: string | null;
      /** Gets or sets the Nib. */
      nib?: string | null;
      /** Gets or sets the TglPengajuanNib. */
      tglPengajuanNib?: string | null;
      /** Gets or sets the TglTerbitNib. */
      tglTerbitNib?: string | null;
      /** Gets or sets the TglPerubahanNib. */
      tglPerubahanNib?: string | null;
      /** Gets or sets the OssId. */
      ossId?: string | null;
      /** Gets or sets the JenisPelakuUsaha. */
      jenisPelakuUsaha?: string | null;
      /** Gets or sets the NoNpp. */
      noNpp?: string | null;
      /** Gets or sets the NoVa. */
      noVa?: string | null;
      /** Gets or sets the NoWlkp. */
      noWlkp?: string | null;
      /** Gets or sets the FlagPerusahaan. */
      flagPerusahaan?: string | null;
      /** Gets or sets the FlagEkspor. */
      flagEkspor?: string | null;
      /** Gets or sets the FlagImpor. */
      flagImpor?: string | null;
      /** Gets or sets the JenisApi. */
      jenisApi?: string | null;
      /** Gets or sets the GabungNegara. */
      gabungNegara?: string | null;
      /** Gets or sets the NegaraPmaDominan. */
      negaraPmaDominan?: string | null;
      /** Gets or sets the TotalPma. */
      totalPma?: number;
      /** Gets or sets the NilaiPmaDominan. */
      nilaiPmaDominan?: number;
      /** Gets or sets the NilaiPmdn. */
      nilaiPmdn?: number;
      /** Gets or sets the PersenPma. */
      persenPma?: number;
      /** Gets or sets the PersenPmdn. */
      persenPmdn?: number;
      /** Gets or sets the KdKawasan. */
      kdKawasan?: number;
      /** Gets or sets the JenisKawasan. */
      jenisKawasan?: string | null;
      /** Gets or sets the VersiPia. */
      versiPia?: string | null;
      /** Gets or sets the JangkaWaktu. */
      jangkaWaktu?: string | null;
      /** Gets or sets the StatusBadanHukum. */
      statusBadanHukum?: string | null;
      /** Gets or sets the StatusPenanamanModal. */
      statusPenanamanModal?: string | null;
      /** Gets or sets the NpwpPerseroan. */
      npwpPerseroan?: string | null;
      /** Gets or sets the NamaPerseroan. */
      namaPerseroan?: string | null;
      /** Gets or sets the NamaSingkatan. */
      namaSingkatan?: string | null;
      /** Gets or sets the JenisPerseroan. */
      jenisPerseroan?: string | null;
      /** Gets or sets the StatusPerseroan. */
      statusPerseroan?: string | null;
      /** Gets or sets the AlamatPerseroan. */
      alamatPerseroan?: string | null;
      /** Gets or sets the RtRwPerseroan. */
      rtRwPerseroan?: string | null;
      /** Gets or sets the KelurahanPerseroan. */
      kelurahanPerseroan?: string | null;
      /** Gets or sets the PerseroanDaerahId. */
      perseroanDaerahId?: string | null;
      /** Gets or sets the KodePosPerseroan. */
      kodePosPerseroan?: string | null;
      /** Gets or sets the NomorTelponPerseroan. */
      nomorTelponPerseroan?: string | null;
      /** Gets or sets the EmailPerusahaan. */
      emailPerusahaan?: string | null;
      /** Gets or sets the DalamBentukUang. */
      dalamBentukUang?: number;
      /** Gets or sets the DalamBentukLain. */
      dalamBentukLain?: string | null;
      /** Gets or sets the TotalModalDasar. */
      totalModalDasar?: number;
      /** Gets or sets the TotalModalDitempatkan. */
      totalModalDitempatkan?: number;
      /** Gets or sets the FlagUmk. */
      flagUmk?: string | null;
      /** Gets or sets the list of PemegangSaham. */
      pemegangSaham?: components["schemas"]["OssPemegangSaham"][] | null;
      /** Gets or sets the list of PenanggungJwb. */
      penanggungJwb?: components["schemas"]["OssPenanggungJawab"][] | null;
      /** Gets or sets the NoPengesahan. */
      noPengesahan?: string | null;
      /** Gets or sets the TglPengesahan. */
      tglPengesahan?: string | null;
      /** Gets or sets the NoAktaLama. */
      noAktaLama?: string | null;
      /** Gets or sets the TglAktaLama. */
      tglAktaLama?: string | null;
      /** Gets or sets the NoPengesahanLama. */
      noPengesahanLama?: string | null;
      /** Gets or sets the TglPengesahanLama. */
      tglPengesahanLama?: string | null;
      /** Gets or sets the list of Legalitas. */
      legalitas?: components["schemas"]["OssLegalitas"][] | null;
      dataRptka?: components["schemas"]["OssRptka"];
      /** Gets or sets the list of DataProyek. */
      dataProyek?: components["schemas"]["OssProyek"][] | null;
      /** Gets or sets the list of DataDni. */
      dataDni?: components["schemas"]["OssDni"][] | null;
      /** Gets or sets the list of DataChecklist. */
      dataChecklist?: components["schemas"]["OssChecklist"][] | null;
      /** Gets or sets the JenisIdUserProses. */
      jenisIdUserProses?: string | null;
      /** Gets or sets the NoIdUserProses. */
      noIdUserProses?: string | null;
      /** Gets or sets the NamaUserProses. */
      namaUserProses?: string | null;
      /** Gets or sets the EmailUserProses. */
      emailUserProses?: string | null;
      /** Gets or sets the HpUserProses. */
      hpUserProses?: string | null;
      /** Gets or sets the AlamatUserProses. */
      alamatUserProses?: string | null;
      /** Gets or sets the JnsKelaminUserProses. */
      jnsKelaminUserProses?: string | null;
      /** Gets or sets the TempatLahirUserProses. */
      tempatLahirUserProses?: string | null;
      /** Gets or sets the TglLahirUserProses. */
      tglLahirUserProses?: string | null;
      /** Gets or sets the DaerahIdUserProses. */
      daerahIdUserProses?: string | null;
      /** Gets or sets the RtRwUserProses. */
      rtRwUserProses?: string | null;
      /** Gets or sets the AgamaUserProses. */
      agamaUserProses?: string | null;
      /** Gets or sets the StatusPerkawinanUserProses. */
      statusPerkawinanUserProses?: string | null;
      /** Gets or sets the PekerjaanUserProses. */
      pekerjaanUserProses?: string | null;
      /** Gets or sets the StatusNib. */
      statusNib?: string | null;
      /** Gets or sets the TipeDokumen. */
      tipeDokumen?: string | null;
    };
    /** Represents a Pemohon with User information. */
    PemohonUserInfo: {
      /** Gets or sets the unique identifier for the Pemohon. */
      id?: number;
      /** Gets or sets the associated user identifier. */
      userId?: string | null;
      /** Gets or sets the Pemohon phone number. */
      phone?: string | null;
      /** Gets or sets the Pemohon address. */
      address?: string | null;
      /** Gets or sets the Pemohon NIB. */
      nib?: string | null;
      /** (Read Only) Gets the Pemohon company name. */
      companyName?: string | null;
      /** (Read Only) Gets the Pemohon penanggung jawab. */
      penanggungJawab?: string | null;
      /** Gets or sets the Pemohon name. */
      name?: string | null;
      /** Gets or sets the Pemohon email. */
      email?: string | null;
    };
    PemohonUserInfoIEnumerableODataValue: {
      value?: components["schemas"]["PemohonUserInfo"][] | null;
    };
    /** Represents a Pemohon. */
    PemohonUpdate: {
      /** Gets or sets the associated user identifier. */
      userId?: string | null;
      /** Gets or sets the Pemohon phone number. */
      phone?: string | null;
      /** Gets or sets the Pemohon address. */
      address?: string | null;
      /** Gets or sets the Pemohon NIB. */
      nib?: string | null;
      /** Gets or sets the Pemohon company name. */
      companyName?: string | null;
      /** Gets or sets the Pemohon penanggung jawab. */
      penanggungJawab?: string | null;
    };
    /** Represents a Pemohon. */
    PemohonView: {
      /** Gets or sets the unique identifier for the Pemohon. */
      id?: number;
      /** Gets or sets the associated user identifier. */
      userId?: string | null;
      /** Gets or sets the Pemohon phone number. */
      phone?: string | null;
      /** Gets or sets the Pemohon address. */
      address?: string | null;
      /** Gets or sets the Pemohon NIB. */
      nib?: string | null;
      /** Gets or sets the Pemohon company name. */
      companyName?: string | null;
      /** Gets or sets the Pemohon penanggung jawab. */
      penanggungJawab?: string | null;
    };
    /** Represents a Perizinan View information. */
    PerizinanView: {
      /** Gets or sets the unique identifier for the Perizinan. */
      id?: number;
      /** Gets or sets the Perizinan number. */
      perizinanNumber?: string | null;
      /** Gets or sets the Perizinan issued date. */
      issuedAt?: string;
      /** Gets or sets the Perizinan expired date. */
      expiredAt?: string;
      /** Gets or sets the Perizinan Tanda Daftar document url. */
      tandaDaftarUrl?: string | null;
      /** Gets or sets the Perizinan company name. */
      companyName?: string | null;
      /** Gets or sets the Perizinan domain. */
      domain?: string | null;
    };
    PerizinanViewIEnumerableODataValue: {
      value?: components["schemas"]["PerizinanView"][] | null;
    };
    /** Represents a Perizinan Update information. */
    PerizinanUpdate: {
      /** Gets or sets the associated Permohonan identifier. */
      permohonanId?: number | null;
      /** Gets or sets the associated Previous Perizinan identifier. */
      previousId?: number | null;
      /** Gets or sets the Perizinan number. */
      perizinanNumber?: string | null;
      /** Gets or sets the Perizinan issued date. */
      issuedAt?: string;
      /** Gets or sets the Perizinan expired date. */
      expiredAt?: string;
      /** Gets or sets the Perizinan Tanda Daftar document url. */
      tandaDaftarUrl?: string | null;
    };
    /** Represents a Perizinan Halaman Muka information. */
    PerizinanHalamanMuka: {
      /** Gets or sets the Perizinan number. */
      perizinanNumber?: string | null;
      /** Gets or sets the Perizinan company name. */
      companyName?: string | null;
      /** Gets or sets the Perizinan domain. */
      domain?: string | null;
      /** Gets or sets the Perizinan issued date. */
      issuedAt?: string;
    };
    PerizinanHalamanMukaIEnumerableODataValue: {
      value?: components["schemas"]["PerizinanHalamanMuka"][] | null;
    };
    /** Represents a Permohonan. */
    Permohonan: {
      /** Gets or sets the unique identifier for the Permohonan. */
      id?: number;
      /** Gets or sets the associated Pemohon identifier. */
      pemohonId?: number | null;
      /** Gets or sets the associated previous Perizinan identifier. */
      previousPerizinanId?: number | null;
      /** Gets or sets the associated Perizinan identifier. */
      perizinanId?: number | null;
      /** Gets or sets the Permohonan submit date. */
      submittedAt?: string;
      /** Gets or sets the associated Permohonan Status identifier. */
      statusId?: number;
      /** (Read Only) Gets the associated Permohonan Status name. */
      statusName?: string | null;
      /** (Read Only) Gets the associated Permohonan Status name for Pemohon. */
      pemohonStatusName?: string | null;
      /** Gets or sets the associated Permohonan Type identifier. */
      typeId?: number;
      /** (Read Only) Gets the associated Permohonan Type name. */
      typeName?: string | null;
      /** Gets or sets the Permohonan number. */
      permohonanNumber?: string | null;
      /** Gets or sets the Permohonan domain. */
      domain?: string | null;
      /** Gets or sets the Permohonan system name. */
      systemName?: string | null;
      /** Gets or sets the Permohonan provider name. */
      providerName?: string | null;
      /** Gets or sets the Permohonan tenaga ahli name. */
      tenagaAhliName?: string | null;
      /** Gets or sets the Permohonan apoteker name. */
      apotekerName?: string | null;
      /** Gets or sets the Permohonan apoteker email. */
      apotekerEmail?: string | null;
      /** Gets or sets the Permohonan apoteker phone number. */
      apotekerPhone?: string | null;
      /** Gets or sets the Permohonan apoteker NIK. */
      apotekerNik?: string | null;
      /** Gets or sets the Permohonan apoteker STRA number. */
      straNumber?: string | null;
      /** Gets or sets the Permohonan apoteker STRA expiry date. */
      straExpiry?: string;
      /** Gets or sets the Permohonan apoteker STRA document url. */
      straUrl?: string | null;
      /** Gets or sets the Permohonan Surat Permohonan document url. */
      suratPermohonanUrl?: string | null;
      /** Gets or sets the Permohonan Proses Bisnis document url. */
      prosesBisnisUrl?: string | null;
      /** Gets or sets the Permohonan Dokumen Api document url. */
      dokumenApiUrl?: string | null;
      /** Gets or sets the Permohonan Dokumen PSE Kominfo document url. */
      dokumenPseUrl?: string | null;
      /** Gets or sets the Permohonan izin usaha document url. */
      izinUsahaUrl?: string | null;
      /** Gets or sets the Permohonan komitmen kerjasama apotek document url. */
      komitmenKerjasamaApotekUrl?: string | null;
      /** Gets or sets the Permohonan SPPL document url. */
      spplUrl?: string | null;
      /** Gets or sets the Permohonan Izin Lokasi document url. */
      izinLokasiUrl?: string | null;
      /** Gets or sets the Permohonan IMB document url. */
      imbUrl?: string | null;
      /** Gets or sets the Permohonan Pembayaran PNBP document url. */
      pembayaranPnbpUrl?: string | null;
      /** Gets or sets the Permohonan Pernyataan Keaslian Dokumen document url. */
      pernyataanKeaslianDokumenUrl?: string | null;
      /** Gets or sets the Permohonan last update. */
      lastUpdate?: string;
      /** Gets or sets the Permohonan id izin (received from OSS). */
      idIzin?: string | null;
      /** Gets or sets the Permohonan id proyek. */
      idProyek?: string | null;
    };
    PermohonanIEnumerableODataValue: {
      value?: components["schemas"]["Permohonan"][] | null;
    };
    /** Represents Permohonan update data. */
    PermohonanSystemUpdate: {
      /** Gets or sets the update Permohonan unique identifier. */
      permohonanId?: number;
      /** Gets or sets the update reason. */
      reason?: string | null;
    };
    /** Represents Permohonan update to generate tanda daftar data. */
    GenerateTandaDaftarData: {
      /** Gets or sets the NIK. */
      nik?: string | null;
      /** Gets or sets the passphrase. */
      passphrase?: string | null;
      /** Gets or sets the update Permohonan unique identifier. */
      permohonanId?: number;
      /** Gets or sets the update reason. */
      reason?: string | null;
    };
    /** Represents basic Permohonan with Pemohon data. */
    PermohonanPemohon: {
      /** Gets or sets the Permohonan unique identifier. */
      permohonanId?: number;
      /** Gets or sets the Permohonan submit date. */
      submittedAt?: string;
      /** Gets or sets the Permohonan number. */
      permohonanNumber?: string | null;
      /** Gets or sets the Permohonan domain. */
      domain?: string | null;
      /** Gets or sets the Permohonan last update. */
      lastUpdate?: string;
      /** (Read Only) Gets the associated Permohonan Status name. */
      statusName?: string | null;
      /** (Read Only) Gets the associated Permohonan Type name. */
      typeName?: string | null;
      /** Gets or sets the Pemohon NIB. */
      nib?: string | null;
      /** Gets or sets the Pemohon company name. */
      companyName?: string | null;
      /** Gets or sets the Pemohon penanggung jawab. */
      penanggungJawab?: string | null;
      /** Gets or sets the Pemohon name. */
      name?: string | null;
      /** Gets or sets the Pemohon email. */
      email?: string | null;
      /** Gets or sets the Permohonan total days from start. */
      totalDays?: number;
      /** Gets or sets the Permohonan user level days. */
      userLevelDays?: number;
    };
    PermohonanPemohonIEnumerableODataValue: {
      value?: components["schemas"]["PermohonanPemohon"][] | null;
    };
    /** Represents multiple Apotek update data. */
    PermohonanApotek: {
      /** Gets or sets the Permohonan unique identifier. */
      permohonanId?: number;
      /** Gets or sets list of Apotek to post. */
      apotek?: components["schemas"]["Apotek"][] | null;
    };
    /** Represents multiple Klinik update data. */
    PermohonanKlinik: {
      /** Gets or sets the Permohonan unique identifier. */
      permohonanId?: number;
      /** Gets or sets list of Klinik to post. */
      klinik?: components["schemas"]["Klinik"][] | null;
    };
    /** Represents a Rumah Sakit. */
    RumahSakit: {
      /** Gets or sets the unique identifier for the Rumah Sakit. */
      id?: number;
      /** Gets or sets the Rumah Sakit name. */
      name?: string | null;
      /** Gets or sets the associated Permohonan identifier. */
      permohonanId?: number | null;
      /** Gets or sets the Rumah Sakit SIA number. */
      siaNumber?: string | null;
      /** Gets or sets the Rumah Sakit Apoteker name. */
      apotekerName?: string | null;
      /** Gets or sets the Rumah Sakit Apoteker STRA number. */
      straNumber?: string | null;
      /** Gets or sets the Rumah Sakit SIPA number. */
      sipaNumber?: string | null;
      /** Gets or sets the Rumah Sakit address. */
      address?: string | null;
      /** Gets or sets the associated Provinsi identifier. */
      provinsiId?: number | null;
      /** (Read only) Gets the associated Provinsi name. */
      provinsiName?: string | null;
    };
    RumahSakitIEnumerableODataValue: {
      value?: components["schemas"]["RumahSakit"][] | null;
    };
    /** Represents multiple Rumah Sakit update data. */
    PermohonanRumahSakit: {
      /** Gets or sets the Permohonan unique identifier. */
      permohonanId?: number;
      /** Gets or sets list of Rumah Sakit to post. */
      rumahSakit?: components["schemas"]["RumahSakit"][] | null;
    };
    /** Represents a Permohonan Status. */
    PermohonanStatus: {
      /** Gets or sets the unique identifier for the Permohonan Status. */
      id?: number;
      /** Gets or sets the Permohonan Status name. */
      name?: string | null;
      /** Gets or sets the Permohonan Status name displayed to user. */
      pemohonDisplayedName?: string | null;
    };
    PermohonanStatusIEnumerableODataValue: {
      value?: components["schemas"]["PermohonanStatus"][] | null;
    };
    /** Represents a Permohonan Type. */
    PermohonanType: {
      /** Gets or sets the unique identifier for the Permohonan Type. */
      id?: number;
      /** Gets or sets the Permohonan Type name. */
      name?: string | null;
    };
    PermohonanTypeIEnumerableODataValue: {
      value?: components["schemas"]["PermohonanType"][] | null;
    };
    /** Represents a Verifikasi Permohonan. */
    VerifikasiPermohonan: {
      /** Gets or sets the unique identifier for the Verifikasi Permohonan. */
      id?: number;
      /** Gets or sets the associated Permohonan identifier. */
      permohonanId?: number | null;
      /** Gets or sets the Verifikasi Permohonan domain check status. */
      domainCheck?: number;
      /** Gets or sets the Verifikasi Permohonan domain check reason. */
      domainCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan system name check status. */
      systemNameCheck?: number;
      /** Gets or sets the Verifikasi Permohonan system name check reason. */
      systemNameCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan provider name check status. */
      providerNameCheck?: number;
      /** Gets or sets the Verifikasi Permohonan provider name check reason. */
      providerNameCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan tenaga ahli name check status. */
      tenagaAhliNameCheck?: number;
      /** Gets or sets the Verifikasi Permohonan tenaga ahli name check reason. */
      tenagaAhliNameCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan apoteker name check status. */
      apotekerNameCheck?: number;
      /** Gets or sets the Verifikasi Permohonan apoteker name check reason. */
      apotekerNameCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan apoteker email check status. */
      apotekerEmailCheck?: number;
      /** Gets or sets the Verifikasi Permohonan apoteker email check reason. */
      apotekerEmailCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan apoteker phone check status. */
      apotekerPhoneCheck?: number;
      /** Gets or sets the Verifikasi Permohonan apoteker phone check reason. */
      apotekerPhoneCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan apoteker NIK check status. */
      apotekerNikCheck?: number;
      /** Gets or sets the Verifikasi Permohonan apoteker NIK check reason. */
      apotekerNikCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan STRA number check status. */
      straNumberCheck?: number;
      /** Gets or sets the Verifikasi Permohonan STRA number check reason. */
      straNumberCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan STRA expiry check status. */
      straExpiryCheck?: number;
      /** Gets or sets the Verifikasi Permohonan STRA expiry check reason. */
      straExpiryCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan STRA check status. */
      straUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan STRA check reason. */
      straUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan surat permohonan check status. */
      suratPermohonanUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan surat permohonan check reason. */
      suratPermohonanUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan proses bisnis check status. */
      prosesBisnisUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan proses bisnis check reason. */
      prosesBisnisUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan dokumen API check status. */
      dokumenApiUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan dokumen API check reason. */
      dokumenApiUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan dokumen PSE check status. */
      dokumenPseUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan dokumen PSE check reason. */
      dokumenPseUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan izin usaha check status. */
      izinUsahaUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan izin usaha check reason. */
      izinUsahaUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan komitmen kerjasama apotek check status. */
      komitmenKerjasamaApotekUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan komitmen kerjasama apotek check reason. */
      komitmenKerjasamaApotekUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan SPPL check status. */
      spplUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan SPPL check reason. */
      spplUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan izin lokasi check status. */
      izinLokasiUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan izin lokasi check reason. */
      izinLokasiUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan IMB check status. */
      imbUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan IMB check reason. */
      imbUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan pembayaran PNBP check status. */
      pembayaranPnbpUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan pembayaran PNBP check reason. */
      pembayaranPnbpUrlCheckReason?: string | null;
      /** Gets or sets the Verifikasi Permohonan pernyataan keaslian dokumen check status. */
      pernyataanKeaslianDokumenUrlCheck?: number;
      /** Gets or sets the Verifikasi Permohonan pernyataan keaslian dokumen check reason. */
      pernyataanKeaslianDokumenUrlCheckReason?: string | null;
    };
    VerifikasiPermohonanIEnumerableODataValue: {
      value?: components["schemas"]["VerifikasiPermohonan"][] | null;
    };
  };
}

export interface operations {}

export interface external {}
